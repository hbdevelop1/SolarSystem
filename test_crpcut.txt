 #include <crpcut.hpp>
     #include <limits>
     
     template <typename T>
     class moving_avg
     {
     public:
       moving_avg() : avg(T()), n(T()) {}
       moving_avg& operator+=(T t) { ++n; avg-= (avg - t)/n; return *this;}
       operator T() const { return avg; }
     private:
       T avg;
       T n;
     };
     
     static const int count = 10;
     
     TEST(too_narrow)
     {
       moving_avg<float> mavg;
       float sum = 0.0;
       for (int n = -count; n < count; ++n)
         {
           sum+= 1.0f/3000 + float(n);
           mavg += 1.0f/3000 + float(n);
         }
       float avg = sum / (2*count);
       float slack = std::numeric_limits<float>::min();
       ASSERT_PRED(crpcut::match<crpcut::abs_diff>(slack), float(mavg), avg);
     }
     
     TEST(close_enough)
     {
       moving_avg<float> mavg;
       float sum = 0.0;
       for (int n = -count; n <= count; ++n)
         {
           sum+= float(n);
           mavg += float(n);
         }
       float avg = sum / (2*count + 1);
       ASSERT_PRED(crpcut::match<crpcut::abs_diff>(1e-6F), float(mavg), avg);
     }
     
     int main(int argc, char *argv[])
     {
       return crpcut::run(argc, argv);
     }


 
 
 
 #include <crpcut.hpp>
     #include <iostream>
     #include <ostream>
     
     TEST(bare_minimum)
     {
     }
     
     TEST(print_a_message)
     {
       std::cout << "hello world, I am " << __PRETTY_FUNCTION__ << std::endl;
     }
     
     TEST(information)
     {
       INFO << "This is also a test" << std::endl
            << "Using the INFO macro";
       INFO << "for output";
     }
     
     int main(int argc, char *argv[])
     {
       return crpcut::run(argc, argv);
     }





 
     #include <crpcut.hpp>
     #include <numeric>
     #include <limits>
     
     template <typename T>
     class moving_avg
     {
     public:
       moving_avg() : avg(T()), n(T()) {}
       moving_avg& operator+=(T t) { ++n; avg-= (avg - t)/n; return *this; }
       operator T() const { return avg; }
     private:
       T avg;
       T n;
     };
     
     static const unsigned count = 300;
     
     TEST(too_narrow)
     {
       moving_avg<float> mavg;
       float sum = 0.0;
       for (unsigned n = 0; n < count; ++n)
         {
           mavg+= 1.0f/3 + float(n);
           sum+= 1.0f/3 + float(n);
        }
       float avg = sum/count;
       ASSERT_PRED(crpcut::match<crpcut::ulps_diff>(2), float(mavg), avg);
     }
     
     TEST(close_enough)
     {
       moving_avg<float> mavg;
       float sum = 0.0;
       for (unsigned n = 0; n < count; ++n)
         {
           mavg+= 1.0f/3 + float(n);
           sum+= 1.0f/3 + float(n);
         }
       float avg = sum/count;
       ASSERT_PRED(crpcut::match<crpcut::ulps_diff>(10), float(mavg), avg);
     }
     
     int main(int argc, char *argv[])
     {
       return crpcut::run(argc, argv);
     }
